# GitHub Workflow for macOS App Bundle and DMG Creation - Dual Architecture
name: Build macOS App - Dual Architecture

# Controls when the workflow will run
on:
  push:
    branches:
      - main
      - FIX--3.0.5
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Build for Apple Silicon arm64
  build-macos-arm64:
    runs-on: macos-latest
    environment: deploy
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install system dependencies
        run: |
          # Install system dependencies if needed
          brew install --quiet create-dmg || true
          
      - name: Read version from Build_Version
        id: version
        run: |
          cd rpmbuild/SOURCES
          VERSION=$(grep "VERSION=" Build_Version | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
          
      - name: Create macOS App Bundle (ARM64)
        run: |
          cd rpmbuild/SOURCES
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Python version: $(python --version)"
          echo "Building ARM64 binary for Apple Silicon..."
          bash Build_App_MacOS_arm64.sh
          
      - name: Verify App Bundle Creation (ARM64)
        run: |
          cd rpmbuild/SOURCES
          if [ ! -d "dist_arm64/Log Viewer.app" ]; then
            echo "Error: ARM64 app bundle was not created!"
            echo "Contents of dist_arm64 directory:"
            ls -la dist_arm64/ || echo "dist_arm64 directory does not exist"
            exit 1
          fi
          echo "ARM64 app bundle verified successfully"
          
      - name: Create DMG Package (ARM64)
        run: |
          cd rpmbuild/SOURCES
          bash Create_DMG_MacOS_arm64.sh
          
      - name: Upload App Bundle Artifact (ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-macOS-App-arm64
          path: rpmbuild/SOURCES/dist_arm64/Log Viewer.app
          retention-days: 30
          
      - name: Upload DMG Artifact (ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-macOS-DMG-arm64
          path: rpmbuild/SOURCES/LogViewer-${{ steps.version.outputs.VERSION }}-macOS-arm64.dmg
          retention-days: 30
          
      - name: Test App Bundle (ARM64)
        run: |
          cd rpmbuild/SOURCES
          # Test that the app bundle can be opened
          open "dist_arm64/Log Viewer.app" --args --help &
          sleep 5
          pkill -f "log_viewer" || true
          
          # Test DMG can be mounted
          hdiutil attach "LogViewer-${{ steps.version.outputs.VERSION }}-macOS-arm64.dmg" -readonly -noautoopen
          sleep 2
          hdiutil detach "/Volumes/Log Viewer ${{ steps.version.outputs.VERSION }}"
          
          echo "macOS ARM64 build and packaging completed successfully!"

  # Build for Intel x86_64
  build-macos-x86_64:
    runs-on: macos-13  # Intel runner
    environment: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          # Install system dependencies if needed
          brew install --quiet create-dmg || true

      - name: Read version from Build_Version
        id: version
        run: |
          cd rpmbuild/SOURCES
          VERSION=$(grep "VERSION=" Build_Version | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Create macOS App Bundle (x86_64)
        run: |
          cd rpmbuild/SOURCES
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Python version: $(python --version)"
          echo "Building x86_64 binary for Intel Macs..."
          bash Build_App_MacOS_x86_64.sh

      - name: Verify App Bundle Creation (x86_64)
        run: |
          cd rpmbuild/SOURCES
          if [ ! -d "dist_x86_64/Log Viewer.app" ]; then
            echo "Error: x86_64 app bundle was not created!"
            echo "Contents of dist_x86_64 directory:"
            ls -la dist_x86_64/ || echo "dist_x86_64 directory does not exist"
            exit 1
          fi
          echo "x86_64 app bundle verified successfully"

      - name: Create DMG Package (x86_64)
        run: |
          cd rpmbuild/SOURCES
          bash Create_DMG_MacOS_x86_64.sh

      - name: Upload App Bundle Artifact (x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-macOS-App-x86_64
          path: rpmbuild/SOURCES/dist_x86_64/Log Viewer.app
          retention-days: 30

      - name: Upload DMG Artifact (x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-macOS-DMG-x86_64
          path: rpmbuild/SOURCES/LogViewer-${{ steps.version.outputs.VERSION }}-macOS-x86_64.dmg
          retention-days: 30

      - name: Test App Bundle (x86_64)
        run: |
          cd rpmbuild/SOURCES
          # Test that the app bundle can be opened
          open "dist_x86_64/Log Viewer.app" --args --help &
          sleep 5
          pkill -f "log_viewer" || true

          # Test DMG can be mounted
          hdiutil attach "LogViewer-${{ steps.version.outputs.VERSION }}-macOS-x86_64.dmg" -readonly -noautoopen
          sleep 2
          hdiutil detach "/Volumes/Log Viewer ${{ steps.version.outputs.VERSION }}"

          echo "macOS x86_64 build and packaging completed successfully!"

  # Create release with both architectures
  create-release:
    needs: [build-macos-arm64, build-macos-x86_64]
    runs-on: ubuntu-latest
    environment: deploy
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Read version from Build_Version
        id: version
        run: |
          cd rpmbuild/SOURCES
          VERSION=$(grep "VERSION=" Build_Version | cut -d'=' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          
      - name: Download ARM64 DMG
        uses: actions/download-artifact@v4
        with:
          name: LogViewer-macOS-DMG-arm64
          path: ./artifacts/
          
      - name: Download x86_64 DMG
        uses: actions/download-artifact@v4
        with:
          name: LogViewer-macOS-DMG-x86_64
          path: ./artifacts/
          
      - name: Create Release Draft
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          name: "Log Viewer v${{ steps.version.outputs.VERSION }}"
          body: |
            # Log Viewer v${{ steps.version.outputs.VERSION }}
            
            ## macOS Apps - Dual Architecture Support
            
            This release includes two optimized versions for different Mac architectures:
            
            ### üçé Apple Silicon (M1/M2/M3) - arm64
            - **File**: `LogViewer-${{ steps.version.outputs.VERSION }}-macOS-arm64.dmg`
            - **Best for**: M1, M2, M3 Macs (2020 and newer)
            - **Performance**: Native performance on Apple Silicon
            
            ### üñ•Ô∏è Intel Macs - x86_64
            - **File**: `LogViewer-${{ steps.version.outputs.VERSION }}-macOS-x86_64.dmg`
            - **Best for**: Intel-based Macs (2019 and earlier)
            - **Performance**: Native performance on Intel processors
            
            ### üîÑ Cross-Compatibility
            Both versions will run on either architecture using Rosetta 2 translation, but for best performance, choose the version that matches your Mac's processor.
            
            ### üìã System Requirements
            - macOS 10.14 (Mojave) or later
            - 100MB RAM minimum
            - 50MB free disk space
            
            ### üöÄ Installation
            1. Download the appropriate DMG file for your Mac
            2. Double-click to mount the DMG
            3. Drag "Log Viewer.app" to Applications folder
            4. Launch from Applications or Launchpad
          files: |
            ./artifacts/LogViewer-${{ steps.version.outputs.VERSION }}-macOS-arm64.dmg
            ./artifacts/LogViewer-${{ steps.version.outputs.VERSION }}-macOS-x86_64.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 