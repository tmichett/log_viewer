name: Build RPM Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v3.1.0)'
        required: false
        default: ''

jobs:
  build-rpm:
    runs-on: ubuntu-latest
    container: fedora:latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install RPM build tools
        run: |
          dnf update -y
          dnf install -y rpm-build rpmdevtools python3-pip git which findutils
          
      - name: Install Python dependencies and uv
        run: |
          dnf install -y python3-devel python3-pip curl
          # Install uv for better Python dependency management
          curl -LsSf https://astral.sh/uv/install.sh | sh
          source ~/.bashrc || true
          
      - name: Extract version from Build_Version file
        id: get_version
        run: |
          cd rpmbuild/SOURCES
          
          # Improved version extraction with fallback (like Build_App.sh)
          if [ -f "Build_Version" ]; then
              VERSION=$(grep "VERSION=" Build_Version | cut -d'=' -f2)
              if [ -z "$VERSION" ]; then
                  echo "Warning: VERSION not found in Build_Version file, using default"
                  VERSION="3.0.0"
              fi
          else
              echo "Warning: Build_Version file not found, using default version"
              VERSION="3.0.0"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building Log Viewer version: $VERSION"
          
          # Determine if this is a tag build
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "is_tag_build=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG_NAME="${{ github.event.inputs.tag }}"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "is_tag_build=true" >> $GITHUB_OUTPUT
          else
            echo "is_tag_build=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Building version: $VERSION"
          
      - name: Display build information
        run: |
          echo "Building RPM package..."
          echo "Version: ${{ steps.get_version.outputs.version }}"
          echo "Is tag build: ${{ steps.get_version.outputs.is_tag_build }}"
          if [ "${{ steps.get_version.outputs.is_tag_build }}" = "true" ]; then
            echo "Tag: ${{ steps.get_version.outputs.tag }}"
          fi
          
      - name: Setup virtual environment and build PyInstaller executable
        run: |
          cd rpmbuild/SOURCES
          
          # Update RPM spec file with current version
          echo "Updating RPM spec file..."
          chmod +x update_rpm_version.sh
          ./update_rpm_version.sh
          
          # Clean up any existing virtual environment
          rm -rf log_viewer_venv
          
          # Create and activate virtual environment
          echo "Creating virtual environment..."
          ~/.local/bin/uv venv log_viewer_venv
          source log_viewer_venv/bin/activate
          
          # Install all required dependencies from requirements.txt
          echo "Installing dependencies from requirements.txt..."
          ~/.local/bin/uv pip install -r requirements.txt
          
          # Install PyInstaller
          echo "Installing PyInstaller..."
          ~/.local/bin/uv pip install PyInstaller
          
          # Build the executable with better error handling
          echo "Building executable with PyInstaller..."
          pyinstaller --noconfirm ./log_viewer.spec
          
          # Validate build success
          if [ -f "./dist/log_viewer" ]; then
              cp ./dist/log_viewer ./
              echo "Build completed successfully!"
              echo "Executable location: $(pwd)/log_viewer"
              echo "Executable size: $(du -h log_viewer | cut -f1)"
          else
              echo "Error: Build failed - executable not found in dist/"
              exit 1
          fi
          
      - name: Setup RPM build environment
        run: |
          # Create RPM build directories
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
          
          # Copy spec file
          cp rpmbuild/SPECS/LogViewer.spec ~/rpmbuild/SPECS/
          
          # Copy source files
          cp -r rpmbuild/SOURCES/* ~/rpmbuild/SOURCES/
          
      - name: Build RPM package
        run: |
          rpmbuild -ba ~/rpmbuild/SPECS/LogViewer.spec
          
      - name: Find and copy RPM and SRPM files
        run: |
          # Find and copy binary RPM
          find ~/rpmbuild/RPMS -name "*.rpm" -exec cp {} . \;
          # Find and copy source RPM
          find ~/rpmbuild/SRPMS -name "*.src.rpm" -exec cp {} . \;
          ls -la *.rpm
          
      - name: Identify RPM and SRPM files
        run: |
          # Find the actual file names
          RPM_FILE=$(find . -name "LogViewer-*.x86_64.rpm" -type f)
          SRPM_FILE=$(find . -name "LogViewer-*.src.rpm" -type f)
          
          echo "RPM_FILE=${RPM_FILE}" >> $GITHUB_ENV
          echo "SRPM_FILE=${SRPM_FILE}" >> $GITHUB_ENV
          
          echo "Found RPM file: ${RPM_FILE}"
          echo "Found SRPM file: ${SRPM_FILE}"
          
      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-RPM-Package
          path: ./LogViewer-*.x86_64.rpm
          retention-days: 30
          
      - name: Upload SRPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-SRPM-Package
          path: ./LogViewer-*.src.rpm
          retention-days: 30
          
      # Note: Release creation is handled by the comprehensive release workflows  
      # This workflow only creates and uploads artifacts
