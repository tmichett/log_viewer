# GitHub Workflow for Windows Executable and Installer Creation
name: Build Windows App

# Controls when the workflow will run
on:
  push:
    branches:
      - main
      - log-viewer-windows-test
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    environment: deploy
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Inno Setup
        run: |
          # Install Inno Setup using chocolatey (more reliable than direct download)
          choco install innosetup -y
          
          # Verify installation
          if (Test-Path "C:\Program Files (x86)\Inno Setup 6\iscc.exe") {
            Write-Host "✓ Inno Setup installed successfully"
          } else {
            Write-Error "✗ Inno Setup installation failed"
            exit 1
          }
          
      - name: Add Inno Setup to PATH
        run: |
          echo "C:\Program Files (x86)\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Read version from Build_Version
        id: version
        run: |
          cd rpmbuild/SOURCES
          $VERSION = (Get-Content Build_Version | Where-Object { $_ -match "VERSION=" }) -replace "VERSION=", ""
          echo "VERSION=$VERSION" >> $env:GITHUB_OUTPUT
          echo "Building Windows version: $VERSION"
          
      - name: Create Windows Executable
        run: |
          cd rpmbuild/SOURCES
          # Create virtual environment
          python -m venv log_viewer_venv
          
          # Activate virtual environment
          .\log_viewer_venv\Scripts\Activate.ps1
          
          # Upgrade pip
          python -m pip install --upgrade pip
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Install PyInstaller
          pip install PyInstaller
          
          # Convert PNG icon to ICO format (required for Inno Setup)
          python -c "
          from PIL import Image
          import os
          
          # Open PNG image
          img = Image.open('smallicon.png')
          
          # Convert to ICO format with multiple sizes
          img.save('smallicon.ico', format='ICO', sizes=[(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)])
          
          print('✓ Icon converted from PNG to ICO format')
          "
          
          # Build executable
          pyinstaller --noconfirm log_viewer_windows.spec
          
          # Copy executable to current directory with version
          Copy-Item "dist\LogViewer-${{ steps.version.outputs.VERSION }}.exe" -Destination "LogViewer-${{ steps.version.outputs.VERSION }}.exe"
          
          # Verify executable was created
          if (Test-Path "LogViewer-${{ steps.version.outputs.VERSION }}.exe") {
            Write-Host "✓ Executable created successfully"
            $size = (Get-Item "LogViewer-${{ steps.version.outputs.VERSION }}.exe").Length
            Write-Host "Executable size: $size bytes"
          } else {
            Write-Error "✗ Executable creation failed"
            Write-Host "Expected: LogViewer-${{ steps.version.outputs.VERSION }}.exe"
            Write-Host "Contents of dist directory:"
            Get-ChildItem "dist\" | ForEach-Object { Write-Host $_.Name }
            exit 1
          }
          
      - name: Create Windows Installer
        run: |
          cd rpmbuild/SOURCES
          
          # Verify Inno Setup is available
          try {
            & iscc /? | Out-Null
            Write-Host "✓ Inno Setup found"
          } catch {
            Write-Error "✗ Inno Setup not found"
            exit 1
          }
          
          # Update Inno Setup script with current version
          python update_inno_version.py
          
          # Create installer
          iscc LogViewer_Installer.iss
          
          # Verify installer was created
          if (Test-Path "installer\LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe") {
            Write-Host "✓ Installer created successfully"
            $size = (Get-Item "installer\LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe").Length
            Write-Host "Installer size: $size bytes"
          } else {
            Write-Error "✗ Installer creation failed"
            exit 1
          }
          
      - name: Test Executable
        run: |
          cd rpmbuild/SOURCES
          
          # Test executable can run
          try {
            $process = Start-Process -FilePath "LogViewer.exe" -ArgumentList "--help" -Wait -PassThru -NoNewWindow
            if ($process.ExitCode -eq 0) {
              Write-Host "✓ Executable test passed"
            } else {
              Write-Host "⚠ Executable test returned exit code: $($process.ExitCode)"
            }
          } catch {
            Write-Host "⚠ Executable test failed: $($_.Exception.Message)"
          }
          
      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-Windows-Executable
          path: rpmbuild/SOURCES/LogViewer-${{ steps.version.outputs.VERSION }}.exe
          
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: LogViewer-Windows-Installer
          path: rpmbuild/SOURCES/installer/LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe
          
      - name: Create Release Draft
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          name: "Log Viewer v${{ steps.version.outputs.VERSION }}"
          files: |
            rpmbuild/SOURCES/LogViewer-${{ steps.version.outputs.VERSION }}.exe
            rpmbuild/SOURCES/installer/LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Summary
        run: |
          cd rpmbuild/SOURCES
          Write-Host "============================================"
          Write-Host "Windows Build Summary"
          Write-Host "============================================"
          
          if (Test-Path "LogViewer-${{ steps.version.outputs.VERSION }}.exe") {
            $size = (Get-Item "LogViewer-${{ steps.version.outputs.VERSION }}.exe").Length
            Write-Host "✓ Executable: LogViewer-${{ steps.version.outputs.VERSION }}.exe ($size bytes)"
          } else {
            Write-Host "✗ Executable: Not found"
          }
          
          if (Test-Path "installer\LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe") {
            $size = (Get-Item "installer\LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe").Length
            Write-Host "✓ Installer: LogViewer-${{ steps.version.outputs.VERSION }}-Setup.exe ($size bytes)"
          } else {
            Write-Host "✗ Installer: Not found"
          }
          
          Write-Host "============================================" 